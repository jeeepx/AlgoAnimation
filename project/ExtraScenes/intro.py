from manim import *

class ACreateIntroScene(Scene):
    sequence = [6, 3, 5, 2, 7, 8, 1]

    def construct(self):

        topic = Text("Longest Increasing Subsequence", gradient=(BLUE, GREEN))
        self.play(Write(topic))
        self.wait(1)
        
        text2 = Text('Dynamic Programming', color=BLUE).next_to(topic, DOWN)
        self.play(Write(text2))
        self.wait(13.9)

        self.play(FadeOut(text2, shift=DOWN * 2))


        text3 = Text('What is a sequence ?', gradient=(BLUE, GREEN)).scale(1).next_to(topic, UP*6)
        self.play(ReplacementTransform(topic, text3))
        self.wait(1)

        text4 = Text('A sequence is an ordered list. The length of a sequence is the number of elements in the list.', color=WHITE).scale(0.5).next_to(text3, DOWN)
        self.play(Write(text4))
        self.wait(8)

        sequenceEx = Text('Sequence example: 6,3,4,5,7,1,11', color=WHITE).scale(0.5).next_to(text4, DOWN)
        self.play(FadeIn(sequenceEx, shift=DOWN))
        self.wait(2)
        self.play(FadeOut(text4, sequenceEx))
        

        topic2 = Text('What is a Subsequence ?', gradient=(BLUE, GREEN)).next_to(text3,DOWN*0)
        self.play(ReplacementTransform(text3, topic2))
        self.wait(1)
        text6 = Tex('A subsequence of a sequence can be generated by selecting some or all elements from the sequence, while retaining the order of the sequence.', color=WHITE).scale(0.7).next_to(topic2, DOWN)
        self.play(FadeIn(text6, shift=DOWN))
        self.wait(3)

        sequenceEx1 = Tex('Given the sequence:  6,3,4,5,7,1,11.', color=WHITE).scale(0.7).next_to(text6, DOWN)
        self.wait(1)
        sequenceEx2 = Tex('One possible subsequences of the given sequence is 3,5,1,11.', color=WHITE).scale(0.7).next_to(sequenceEx1, DOWN)
        self.play(FadeIn(sequenceEx1, shift=DOWN))
        self.wait(1)
        self.play(FadeIn(sequenceEx2, shift=DOWN))
        self.wait(10)
        self.play(FadeOut(text6, sequenceEx1, sequenceEx2))

        self.wait(1)
        topic3 = Text('What is an Increasing Sequence/Subsequence ?', gradient=(BLUE, GREEN)).scale(0.8).next_to(topic2,DOWN*0)
        self.play(ReplacementTransform(topic2, topic3))
        self.wait(1)
        sequence_an = MathTex(r"A \:sequence\: a_1, a_2, a_3, ..., a_n \:is\: increasing\: \:if\: a_1 < a_2 < a_3 < ... <a_n.",
        substrings_to_isolate=("1","2","3")).scale(0.8).next_to(topic3,DOWN*1)
        sequence_an.set_color_by_tex("1",BLUE)
        sequence_an.set_color_by_tex("2",BLUE)
        sequence_an.set_color_by_tex("3",BLUE)
 
        self.play(FadeIn(sequence_an, shift=DOWN))
        sequenceEx1 = Tex('Given the sequence:  6,3,4,5,7,1,11.', color=WHITE).scale(0.7).next_to(sequence_an, DOWN)
        self.wait(1)
        sequenceEx2 = Tex('One possible increasing subsequences is 3,5,7,11.', color=WHITE).scale(0.7).next_to(sequenceEx1, DOWN)
        sequenceEx3 = Tex('The longest increasing subsequence is 3,4,5,7,11.', color=WHITE).scale(0.7).next_to(sequenceEx2, DOWN)

        self.play(FadeIn(sequenceEx1, shift=DOWN))
        self.wait(1)
        self.play(FadeIn(sequenceEx2, shift=DOWN))
        self.wait(1)
        self.play(FadeIn(sequenceEx3, shift=DOWN))
        self.wait(24)
        self.play(FadeOut(sequenceEx1, sequenceEx2, sequence_an, sequenceEx3))

        topic4 = Text('How to solve the Increasing Subsequence Problem?', color=BLUE).scale(0.8).next_to(topic,UP*6)
        self.play(ReplacementTransform(topic3, topic4))
        option1 = Text('Naive Recursion Enumeration', color=WHITE).scale(0.8).next_to(topic4,DOWN*2)
        self.play(FadeIn(option1, shift=DOWN))
        option2 = Text('Backtracking & Dynamic Programming', color=WHITE).scale(0.8).next_to(option1,DOWN*1)
        self.play(FadeIn(option2, shift=DOWN))
        self.wait(0.1)
        self.play(FadeOut(option1, option2, topic4))
        self.wait(0.1)
        self.add(topic4,option1,option2)
        self.wait(0.1)
        topic5 = Text('Naive Recursion Enumeration', gradient=(BLUE, GREEN)).scale(0.8)
        self.play(FadeIn(topic5, shift=DOWN))
        self.wait(22)
        self.play(FadeOut(topic5))
        topic6 = Text('Backtracking + Dynamic Programming', gradient=(BLUE, GREEN)).scale(0.8)
        self.play(FadeIn(topic6, shift=DOWN))
        self.wait(10)
        self.play(FadeOut(topic6))


